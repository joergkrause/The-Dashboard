version: '3.9'

# Note: Volume bindings are for Windows. For Linux, use the following:

services:
  # Consider secure mode in prod as described here: https://developers.eventstore.com/server/v20.10/installation.html#use-docker-compose
  eventstore:
    image: eventstore/eventstore:latest
    container_name: eventstore
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_EXT_TCP_PORT=1113
      - EVENTSTORE_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - "1113:1113"
      - "2113:2113"
    volumes:
      - type: bind
        source: D:\Volumes\eventstore\data
        target: /var/lib/eventstore
      - type: bind
        source: D:\Volumes\eventstore\logs
        target: /var/log/eventstore

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver
    profiles: [ all, backend, dashboard, tiles, dataconsumer, uiinfo ]
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: "p@ssw0rd"
      ACCEPT_EULA: "Y"
      MSYS_NO_PATHCONV: 1
    healthcheck:
      test: [ "CMD", "sqlcmd", "-U", "sa", "-P", "p@ssw0rd", "-Q", "SELECT 1" ]
      interval: 15s
      timeout: 30s
      retries: 3
      start_period: 60s
    volumes:
     - type: bind
       source: D:\Volumes\sqldata
       target: /var/opt/mssql/data
  
  eventbus:
    image: rabbitmq:3-management
    container_name: eventbus
    profiles: [ all, eventbus, backend, dashboard, tiles, dataconsumer ]
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: p@ssw0rd
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 15s
      timeout: 30s
      retries: 3
      start_period: 60s

  frontend:
    image: ${DOCKER_REGISTRY-}frontend:latest
    profiles: [ all, frontend ]
    build:
      context: .
      dockerfile: TheDashboard.FrontendUi/Dockerfile
    depends_on:
     - eventstore
     - proxy
     - thedashboard.dashboardservice
     - thedashboard.tileservice
     - thedashboard.dataconsumerservice
     - thedashboard.uiinfoservice
    ports:
      - "80:80/tcp"

  proxy:
    image: ${DOCKER_REGISTRY-}proxy:latest
    profiles: [ all, backend, dashboard ]
    build:
      context: .
      dockerfile: TheDashboard.Proxy/Dockerfile
    ports:
      - "5000:5000/tcp"
    depends_on:
      - eventstore
      - eventbus      

  thedashboard.dashboardservice:
    image: ${DOCKER_REGISTRY-}dashboardservice:latest
    profiles: [ all, backend, dashboard ]
    build:
      context: .
      dockerfile: TheDashboard.DashboardService/Dockerfile
    ports:
      - "5100:80/tcp"
    depends_on:
      - eventstore
      - sqlserver
      - eventbus
  
  thedashboard.tileservice:
    image: ${DOCKER_REGISTRY-}tileservice
    profiles: [ all, backend, tiles ]
    build:
      context: .
      dockerfile: TheDashboard.TileService/Dockerfile
    ports:
      - "5200:80/tcp"
    depends_on:
      - eventstore
      - sqlserver
      - eventbus

  thedashboard.dataconsumerservice:
    image: ${DOCKER_REGISTRY-}dataconsumerservice
    profiles: [ all, backend, dataconsumer ]
    build:
      context: .
      dockerfile: TheDashboard.DataConsumerService/Dockerfile
    ports:
      - "5300:80/tcp"
    depends_on:
      - eventstore
      - sqlserver
      - eventbus

  thedashboard.uiinfoservice:
    image: ${DOCKER_REGISTRY-}uiinfoservice
    profiles: [ all, backend, uiinfo ]
    build:
      context: .
      dockerfile: TheDashboard.UiInfoservice/Dockerfile
    ports:
      - "5400:80/tcp"
    depends_on:
      - eventstore
      - sqlserver
      - eventbus

networks:
  proxynet: