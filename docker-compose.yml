version: '3.4'

# Prepare a certificate: 
# dotnet dev-certs https -ep ${APPDATA}\ASP.NET\Https\localhost.pfx -p crypticpassword
# dotnet dev-certs https --trust

services:
  keycloak:
    image: jboss/keycloak:latest
    container_name: iam
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
      - KEYCLOAK_IMPORT=/config/realm-export.json -Dkeycloak.migration.strategy=OVERWRITE_EXISTING
    volumes:
      - ./keycloak-configs:/config
      - ./volumes/keycloak_data:/opt/jboss/keycloak/standalone/data
    ports:
      - 8080:8080

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver
    profiles: [ all, backend, dashboard, tiles, datasource ]
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: "p@ssw0rd"
      ACCEPT_EULA: "Y"
      MSYS_NO_PATHCONV: 1
    healthcheck:
      test: [ "CMD", "sqlcmd", "-U", "sa", "-P", "p@ssw0rd", "-Q", "SELECT 1" ]
      interval: 15s
      timeout: 30s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 4G
    volumes:
     - type: bind
       source: ./volumes/sql_data
       target: /var/opt/mssql/data
  
  eventbus:
    image: rabbitmq:3-management
    container_name: eventbus
    profiles: [ all, eventbus, backend, dashboard, tiles, datasource, uiinfo ]
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: p@ssw0rd
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 15s
      timeout: 30s
      retries: 3
      start_period: 60s

  # Consider secure mode in prod as described here: https://developers.eventstore.com/server/v20.10/installation.html#use-docker-compose
  eventstore:
    image: eventstore/eventstore:latest
    container_name: eventstore
    profiles: [ all, backend, proxy ]
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_EXT_TCP_PORT=1113
      - EVENTSTORE_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - "1113:1113"
      - "2113:2113"
    volumes:
      - type: bind
        source: "/D/Volumes/eventstore/data"
        target: /var/lib/eventstore
      - type: bind
        source: ./volumes/eventstore_data_logs
        target: /var/log/eventstore

  frontend:
    image: ${DOCKER_REGISTRY-}frontend:latest
    container_name: "thedashboard_frontend"
    profiles: [ all, frontend ]
    build:
      context: .
      dockerfile: TheDashboard.Frontend/Dockerfile
    depends_on:
     - keycloak
     - proxy
     - thedashboard.dashboardservice
     - thedashboard.tileservice
     - thedashboard.datasourceservice
     - thedashboard.uiinfoservice
    ports:
      - "7501:80"
      - "7500:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Password=cryptickey
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/TheDashboard.Frontend.pfx
    volumes:
      - ~/.aspnet/https:/https:ro

  proxy:
    image: ${DOCKER_REGISTRY-}proxy:latest
    container_name: proxy
    profiles: [ all, backend, proxy ]
    build:
      context: .
      dockerfile: TheDashboard.Proxy/Dockerfile
    ports:
      - "5000:5000/tcp"
    depends_on:
      - eventstore
      - eventbus      

  thedashboard.dashboardservice:
    image: ${DOCKER_REGISTRY-}dashboardservice:latest
    container_name: "thedashboard_dashboard_service"
    profiles: [ all, backend, dashboard ]
    build:
      context: .
      dockerfile: TheDashboard.DashboardService/Dockerfile
    ports:
      - "5100:80/tcp"
    depends_on:
      - sqlserver
      - eventbus
  
  thedashboard.tileservice:
    image: ${DOCKER_REGISTRY-}tileservice
    container_name: "thedashboard_tile_service"
    profiles: [ all, backend, tiles ]
    build:
      context: .
      dockerfile: TheDashboard.TileService/Dockerfile
    ports:
      - "5200:80/tcp"
    depends_on:
      - sqlserver
      - eventbus

  thedashboard.datasourceservice:
    image: ${DOCKER_REGISTRY-}datasourceservice
    container_name: "thedashboard_datasource_service"
    profiles: [ all, backend, datasource ]
    build:
      context: .
      dockerfile: TheDashboard.DataSourceService/Dockerfile
    ports:
      - "5300:80/tcp"
    depends_on:
      - sqlserver
      - eventbus

  thedashboard.uiinfoservice:
    image: ${DOCKER_REGISTRY-}uiinfoservice
    container_name: "thedashboard_uiinfo_service"
    profiles: [ all, backend, uiinfo ]
    build:
      context: .
      dockerfile: TheDashboard.UiInfoservice/Dockerfile
    ports:
      - "5400:80/tcp"
    depends_on:
      - sqlserver
      - eventbus

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./volumes/grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: mypassword

volumes:
  keycloak_data:  
  sql_data:
  eventstore_data:
  eventstore_data_logs:
  grafana_data:  
  prometheus_data:

networks:
  proxynet: