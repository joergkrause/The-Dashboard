<div class="pin-pad-container">
  <div class="pin-pad">
    <div class="gradient-circle" onclick="@(() => Enter(9))">
      9
    </div>
    <div class="gradient-circle" onclick="@(() => Enter(8))">
      8
    </div>
    <div class="gradient-circle" onclick="@(() => Enter(7))">
      7
    </div>
    <div class="gradient-circle" onclick="@(() => Enter(6))">
      6
    </div>
    <div class="gradient-circle" onclick="@(() => Enter(5))">
      5
    </div>
    <div class="gradient-circle" onclick="@(() => Enter(4))">
      4
    </div>
    <div class="gradient-circle" onclick="@(() => Enter(3))">
      3
    </div>
    <div class="gradient-circle" onclick="@(() => Enter(2))">
      2
    </div>
    <div class="gradient-circle" onclick="@(() => Enter(1))">
      1
    </div>
    <div class="gradient-circle last" onclick="@(() => Enter(0))">
      0
    </div>
  </div>  
</div>
<div class="display-4 m-5 text-center pin-pad-pin">@PinProtected</div>

@code {

  [Parameter]
  public string Pin { get; set; }

  public string PinProtected { get; set; }

  [Parameter]
  public short Tries { get; set; } = 3;

  [Parameter]
  public EventCallback PinOk { get; set; }

  [Parameter]
  public EventCallback PinNotOk { get; set; }

  private int currentTries;
  private string currentPinSequence;

  public async Task Enter(int num)
  {
    currentPinSequence += num.ToString();
    if (currentPinSequence.Length == Pin.Length)
    {
      if (currentPinSequence == Pin)
      {
        if (PinOk.HasDelegate)
        {
          currentTries = 0;
          currentPinSequence = string.Empty;
          await PinOk.InvokeAsync();
        }
      }
      else
      {
        if (currentTries == Tries)
        {
          if (PinNotOk.HasDelegate)
          {
            await PinNotOk.InvokeAsync();
          }
        }
        currentTries++;
      }
    }
    if (currentPinSequence.Length > Pin.Length)
    {
      currentPinSequence = string.Empty;
    }
    PinProtected = currentPinSequence.Length switch
    {
      var len when len > 1 => String.Join("", Enumerable.Repeat<string>("*", currentPinSequence.Length - 1)) + currentPinSequence.Substring(currentPinSequence.Length - 1, 1),
      var len when len == 1 => currentPinSequence.Substring(0, 1),
      _ => string.Empty
    };
  }
}