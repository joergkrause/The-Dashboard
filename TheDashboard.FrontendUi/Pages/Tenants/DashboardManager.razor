@page "/tenants/dashboardmanager"
@using TheDashboard.SharedEntities
@using TheDashboard.Frontend.Services
@using Blazorise.DataGrid

@inject IDashboardService DashboardService

<h3>DashboardManager</h3>

<Blazorise.Alert Color="Blazorise.Color.Info">
  Here you can manage all your dashboards. Each dashboard has a distinct URL for data viewing. To make use of a dashboard you need to assign to tasks:
  1) Add datasources to retrieve any kind of data. 2) Add tiles that consume data and provide a view, along with filter and transformation capabilities.
</Blazorise.Alert>

<DataGrid TItem="DashboardDto"
@bind-SelectedRow="@selectedContent"
          Data="@Dashboards"
          Filterable="true"
          Sortable="true"
          Editable="false"
              ShowPager
          DetailRowTrigger="(args) => args.Single = true"
          DetailRowStartsVisible="false"
          CommandMode="DataGridCommandMode.ButtonRow">
  <ChildContent>
    <DataGridColumn TItem="DashboardDto" Caption="Id" Field="@nameof(DashboardDto.Id)" Filterable=false Sortable=false Width="10">
      <DisplayTemplate>
        &nbsp;
      </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="DashboardDto" Caption="Id" Field="@nameof(DashboardDto.Name)" Filterable=false Sortable=false Width="10">
      <DisplayTemplate>
        &nbsp;
      </DisplayTemplate>
    </DataGridColumn>
  </ChildContent>
  <EmptyTemplate>
    <div class="box">
      No dashboards to show...
    </div>
  </EmptyTemplate>
  <LoadingTemplate>
    <div class="box">
      <progress class="progress is-small is-primary" max="100" />
    </div>
  </LoadingTemplate>
  <ButtonRowTemplate>
    <Blazorise.Button Color="Blazorise.Color.Primary" Size="Blazorise.Size.Small" Class="float-end" Clicked="CreateDashboard">New</Blazorise.Button>
    <Blazorise.Button Color="Blazorise.Color.Danger" Size="Blazorise.Size.Small" Class="float-end" Clicked="RemoveDashboard">Delete</Blazorise.Button>
  </ButtonRowTemplate>
</DataGrid>

@code {

  DashboardDto selectedContent;

  List<DashboardDto> Dashboards = new();
  
  private async Task CreateDashboard()
  {
    var dashboard = new DashboardDto { Id = Guid.NewGuid(), Name = "New 1" };
    await DashboardService.InvokeCommand<DashboardAdded>(dashboard);
    Dashboards.Add(dashboard);
  }

  private async Task RemoveDashboard()
  {
    await DashboardService.InvokeCommand<DashboardRemoved>(selectedContent);
    Dashboards.Remove(selectedContent);
  }


}
