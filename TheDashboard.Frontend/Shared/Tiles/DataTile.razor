@inject NavigationManager Navigation

<div class="@positioningClass">
  <h3>@Title</h3>
  <h4>@Subtitle</h4>
  <p>
    @messages.Count()
  </p>
  @Content
</div>

@code {
  private List<string> messages = new List<string>();
  private string? userInput;
  private string? messageInput;

  private string positioningClass => $"col-{Width} offset-{X}";

  [Parameter]
  public int X { get; set; }

  [Parameter]
  public int Width { get; set; }

  [Parameter]
  public string Title { get; set; }

  [Parameter]
  public string Subtitle { get; set; }

  [Parameter]
  public RenderFragment Content { get; set; }

  protected override async Task OnInitializedAsync()
  {
  }

  //private async Task Send()
  //{
  //  if (hubConnection is not null)
  //  {
  //    await hubConnection.SendAsync("SendMessage", userInput, messageInput);
  //  }
  //}


  //public async ValueTask DisposeAsync()
  //{
  //  if (hubConnection is not null)
  //  {
  //    await hubConnection.DisposeAsync();
  //  }
  //}
}


@*@using TheDashboard.Frontend.Services;
@using TheDashboard.Frontend.Shared.Tiles
@using TheDashboard.SharedEntities;

@inject ITileDataService TileDataService

<div class="container">
  <div class="row">
    <h1>@DashboardTitle</h1>
    @foreach (var tile in Tiles)
    {
      <DataTile X="@tile.XOffset" Y="@tile.YOffset" Width="@tile.Width" Title="@tile.Title" Subtitle="@tile.SubTitle">
        @dataMessage
      </DataTile>
    }
  </div>
</div>

@code {

  private string DashboardTitle { get; set; } = "Dashboard Title";

  private string dataMessage = "";

  [Parameter]
  public Guid DashboardId { get; set; }


  private List<TileDto> Tiles = new List<TileDto>();

  protected async override Task OnInitializedAsync()
  {
    await TileDataService.Init();
    TileDataService.Message += (Guid tileId, string message) => dataMessage = message;
  }

}
*@