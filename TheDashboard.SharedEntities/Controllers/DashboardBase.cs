//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace TheDashboard.SharedEntities
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IDashboardBaseController
    {

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DashboardDto>> GetAllAsync();


        /// <returns>Created</returns>

        System.Threading.Tasks.Task<DashboardDto> AddDashboardAsync(DashboardDto body);


        /// <returns>Success</returns>

        System.Threading.Tasks.Task<DashboardDto> GetAsync(System.Guid id);



        /// <returns>Accepted</returns>

        System.Threading.Tasks.Task UpdateDashboardAsync(int id, DashboardDto body);


        /// <returns>Accepted</returns>

        System.Threading.Tasks.Task RemoveDashboardAsync(System.Guid id);


        System.Threading.Tasks.Task SearchAsync(string name);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class DashboardBaseController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IDashboardBaseController _implementation;

        public DashboardBaseController(IDashboardBaseController implementation)
        {
            _implementation = implementation;
        }

        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/db")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DashboardDto>> GetAll()
        {

            return _implementation.GetAllAsync();
        }

        /// <returns>Created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/db")]
        public System.Threading.Tasks.Task<DashboardDto> AddDashboard([Microsoft.AspNetCore.Mvc.FromBody] DashboardDto body)
        {

            return _implementation.AddDashboardAsync(body);
        }

        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/db/{id}")]
        public System.Threading.Tasks.Task<DashboardDto> Get(System.Guid id)
        {

            return _implementation.GetAsync(id);
        }

        /// <returns>Accepted</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("api/db/{id}")]
        public System.Threading.Tasks.Task UpdateDashboard(int id, [Microsoft.AspNetCore.Mvc.FromBody] DashboardDto body)
        {

            return _implementation.UpdateDashboardAsync(id, body);
        }

        /// <returns>Accepted</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("api/db/{id}")]
        public System.Threading.Tasks.Task RemoveDashboard(System.Guid id)
        {

            return _implementation.RemoveDashboardAsync(id);
        }

        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/db/search")]
        public System.Threading.Tasks.Task Search([Microsoft.AspNetCore.Mvc.FromQuery] string name)
        {

            return _implementation.SearchAsync(name);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DashboardDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("layoutId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int LayoutId { get; set; }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603